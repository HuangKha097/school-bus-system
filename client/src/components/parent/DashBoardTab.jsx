import React, { useState, useEffect } from "react";
import classNames from "classnames/bind";
import styles from "../../assets/css/parent/DashboardTab.module.scss";
import { Link } from "react-router-dom";
import * as BusService from "../../service/BusService.js";
import * as BusController from "../../controller/BusController.js";
import * as RouteService from "../../service/RouteService.js";
import * as RouteController from "../../controller/RouteController.js";

const cx = classNames.bind(styles);

const DashboardTab = ({ user }) => {
    const [bus, setBus] = useState({});
    const [routeCoords, setRouteCoords] = useState(null);
    const childrenList = user?.parentInfo?.children || [];
    const [selectedChildIndex, setSelectedChildIndex] = useState(0);

    const getStatusInfo = (status) => {
        switch (status) {
            case "ƒêang ƒëi h·ªçc":
                return { className: "on-bus" };
            case "ƒê√£ ƒë·∫øn tr∆∞·ªùng":
                return { className: "at-school" };
            case "ƒêang v·ªÅ nh√†":
                return { className: "going-home" };
            case "V·∫Øng m·∫∑t":
                return { className: "absent" };
            default:
                return { className: "unknown" };
        }
    };

    useEffect(() => {
        const fetchBus = async () => {
            try {
                const busId = childrenList[selectedChildIndex]?.registeredBus;
                if (!busId) return;

                const response = await BusController.fetchBusById(busId);
                setBus(response);
                if (response?.routeNumber) {
                    try {
                        const responseRoute =
                            await RouteController.fetchRouteNumber(
                                response?.routeNumber
                            );
                        const data = responseRoute;
                        if (data) {
                            const coords = {
                                lat: data.latitude,
                                lng: data.longitude,
                            };
                            setRouteCoords(coords);
                        } else {
                            console.warn("Kh√¥ng t√¨m th·∫•y tuy·∫øn");
                        }
                    } catch (error) {
                        console.error("L·ªói khi l·∫•y t·ªça ƒë·ªô tuy·∫øn:", error);
                    }
                }
            } catch (error) {
                console.log(error);
            }
        };
        fetchBus();
    }, [user, childrenList, selectedChildIndex]);

    if (childrenList.length === 0) {
        return (
            <div className={cx("dashboard-container")}>
                <h2>Dashboard</h2>
                <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc sinh.</p>
            </div>
        );
    }

    const selectedChild = childrenList[selectedChildIndex];
    const statusInfo = getStatusInfo(selectedChild?.status);

    return (
        <div className={cx("dashboard-container")}>
            {childrenList.length > 1 && (
                <div className={cx("child-tabs")}>
                    {childrenList.map((child, index) => (
                        <button
                            key={child._id || child.studentNumber}
                            className={cx("tab-item", {
                                active: index === selectedChildIndex,
                            })}
                            onClick={() => setSelectedChildIndex(index)}
                        >
                            {child.name}
                        </button>
                    ))}
                </div>
            )}

            <div className={cx("dashboard-content")}>
                <h2>Dashboard c·ªßa {selectedChild.name}</h2>

                <div
                    className={cx("card", "status-card", statusInfo.className)}
                >
                    <span className={cx("status-icon")}>{statusInfo.icon}</span>
                    <div className={cx("status-text")}>
                        <p>Tr·∫°ng th√°i</p>
                        <h3>{selectedChild.status || "Ch∆∞a c·∫≠p nh·∫≠t"}</h3>
                    </div>
                </div>

                <Link
                    to={`/tracking/${bus.busNumber}`}
                    state={{ endAddress: routeCoords }}
                    className={cx(
                        "card-link",
                        !bus.busNumber || !routeCoords ? "disabled" : ""
                    )}
                >
                    <div className={cx("card", "action-card")}>
                        <span className={cx("action-icon")}>üó∫Ô∏è</span>
                        <h3>Theo d√µi tr√™n b·∫£n ƒë·ªì</h3>
                        <p>Xem v·ªã tr√≠ xe bu√Ωt theo th·ªùi gian th·ª±c </p>
                    </div>
                </Link>

                <div className={cx("info-grid")}>
                    <div className={cx("card", "info-card")}>
                        <p>Xe bu√Ωt ƒëƒÉng k√Ω</p>
                        <h4>
                            {selectedChild.registeredBus
                                ? bus?.busNumber
                                : "No bus"}
                        </h4>
                    </div>
                    <div className={cx("card", "info-card")}>
                        <p>M√£ s·ªë h·ªçc sinh</p>
                        <h4>{selectedChild.studentNumber}</h4>
                    </div>
                    <div className={cx("card", "info-card")}>
                        <p>L·ªõp</p>
                        <h4>{selectedChild.grade}</h4>
                    </div>
                    <div className={cx("card", "info-card")}>
                        <p>SƒêT (con)</p>
                        <h4>{selectedChild.phone}</h4>
                    </div>
                    <span className={cx("hot-line")}>
                        HotLine h·ªó tr·ª£: 0912345678
                    </span>
                </div>
            </div>
        </div>
    );
};

export default DashboardTab;
